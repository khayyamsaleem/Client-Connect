#+TITLE: CS554 Final Project: Client Connect
#+OPTIONS: toc:nil num:nil
#+STARTUP: noindent showall

#+html: <p align="center"><img src="./assets/ClientConnectLogo.svg" width="100px" /></p>

* Group Members
- Khayyam Saleem, Michael Iacona, Maxwell Melo, Annie Topoleski

* Development Instructions
- Clone the repository:
  #+BEGIN_SRC bash
    git clone https://github.com/khayyamsaleem/cs554-final-proj
    cd cs554-final-proj
  #+END_SRC
- Create a .env file. For non-prod environments, you can just rename ~.env.sample~ to ~.env~ to get started.
- Ensure that you have ~nodemon~, ~yarn~, and ~mongod~ installed on your machine.
  - Ensure that your machine is not a Windows machine. If it is, fix the ~package.json~ yourself to make stuff work, or use ~Bash on Ubuntu on Windows~.
- Run these commands:
  #+BEGIN_SRC bash
    yarn install
    git checkout <name>-<feature> # e.g. ham-chat-client
    yarn start
  #+END_SRC
- To work on backend, work in ~server~ directory. Self-explanatory configuration, mostly 546-level express and mongo. Test your routes with Postman or curl or httpie before implementing into react frontend. NO FRONTEND SHOULD BE PRODUCED IN THE ~server~ FOLDER. Only JSON responses, with ~res.json~.
- To work on frontend, implement components in ~components~ directory and create pages in ~pages~ directory. Prefix imports with a tilde ~( ~ )~ for absolute imports. Follow the example of the ~Login~ component and ~Login~ page. Not each component needs to have its own page. Communicate with the backend using ~isomorphic-unfetch~. Refer to ~docs/strats.org~ or Khayyam Saleem for questions or pair-programming requests.

* Stack
- mongo, express, react (Next.js), node *(MERN)*
- socket.io for messaging
- redis for chat caching
- mongoose for schema definition
- Semantic UI for rendering
- winston for logging
